- name: Deploy Content Node Infrastructure
  hosts: localhost
  vars_files:
    - ../group_vars/all.yml
  vars:
    env_name: "{{ env | default('staging') }}"
    aws_region: "{{ region | default('us-east-2') }}"
  
  pre_tasks:
    - name: Verify required environment variables
      assert:
        that:
          - lookup('env', 'AWS_ACCESS_KEY_ID') != ''
          - lookup('env', 'AWS_SECRET_ACCESS_KEY') != ''
          - lookup('env', 'VPC_SUBNET_ID') != ''
          
          - lookup('env', 'CF_EMAIL') != ''
          - lookup('env', 'CF_TOKEN') != ''
          
          - lookup('env', 'OPERATOR_ID') != ''
          - lookup('env', 'PRIVATE_KEY') != ''
        fail_msg: |
          Missing required environment variables. Please ensure all required variables are set:
          - AWS_ACCESS_KEY_ID
          - AWS_SECRET_ACCESS_KEY
          - VPC_SUBNET_ID
          - CF_EMAIL
          - CF_TOKEN
          - OPERATOR_ID
          - PRIVATE_KEY
          Optional:
          - NODE_REGION (defaults to 'us')

  tasks:
    - name: Set deployment variables
      set_fact:
        security_group: "content-{{ env_name }}"
        subdomain_prefix: "{{ 'sepolia-staging' if env_name == 'staging' else 'sepolia' }}"

    - name: Create EC2 instance
      amazon.aws.ec2_instance:
        name: "content-node-{{ env_name }}-{{ ansible_date_time.epoch }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        security_group: "{{ security_group }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        region: "{{ aws_region }}"
        key_name: "content-{{ env_name }}"
        wait: yes
        tags:
          Environment: "{{ env_name }}"
          Service: content-node
          Name: "content-node-{{ env_name }}"
          CreatedBy: ansible
      register: ec2

    - name: Wait for instance to be ready
      wait_for:
        host: "{{ ec2.instances[0].public_ip_address }}"
        port: 22
        timeout: 300
        state: started
      register: wait_result
      retries: 2
      delay: 15

    - name: Generate node identifier from timestamp
      set_fact:
        node_number: "{{ ansible_date_time.epoch }}"

    - name: Set FQDN
      set_fact:
        fqdn: "content-{{ node_number }}.{{ aws_region }}.{{ subdomain_prefix }}.{{ cf_zone }}"

    - name: Set global facts
      set_fact:
        global_env_name: "{{ env_name }}"
        global_fqdn: "{{ fqdn }}"
        global_private_key: "{{ private_key }}"
        global_operator_id: "{{ operator_id }}"
        global_node_region: "{{ node_region }}"
        cache: yes

    - name: Create DNS record in Cloudflare
      cloudflare_dns:
        zone: "{{ cf_zone }}"
        record: "{{ fqdn }}"
        type: A
        value: "{{ ec2.instances[0].public_ip_address }}"
        account_email: "{{ cloudflare_email }}"
        account_api_token: "{{ cloudflare_token }}"
        state: present
      register: dns_result
      retries: 2
      delay: 15

    - name: Add host to inventory
      add_host:
        name: "{{ ec2.instances[0].public_ip_address }}"
        groups: new_nodes
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "~/.ssh/content-{{ env_name }}.pem"
        fqdn: "{{ fqdn }}"

- name: Configure Content Node
  hosts: new_nodes
  become: yes
  vars_files:
    - ../group_vars/all.yml
  
  tasks:
    - name: Clone repository
      git:
        repo: https://github.com/earthfast/node-operator-tooling
        dest: /home/ubuntu/node-operator-tooling
      become_user: ubuntu

    - name: Register node using CLI
      delegate_to: localhost
      become: no
      shell: |
        cd ../files
        python3 register_node.py "{{ hostvars['localhost']['global_env_name'] }}" "{{ hostvars['localhost']['global_private_key'] }}" "{{ hostvars['localhost']['global_fqdn'] }}" "{{ hostvars['localhost']['global_operator_id'] }}" "{{ hostvars['localhost']['global_node_region'] }}"
      register: registration_output

    - name: Extract node ID
      delegate_to: localhost
      become: no
      set_fact:
        node_id: "{{ registration_output.stdout | regex_search('ANSIBLE_NODE_ID=(0x[a-fA-F0-9]+)', '\\1') | first }}"

    - name: Run setup script
      shell: |
        cd /home/ubuntu/node-operator-tooling/content-node/docker-compose
        printf "%s\n%s\n%s\n%s\n" "{{ hostvars['localhost']['global_fqdn'] }}" "{{ node_id }}" "false" "ops@earthfast.com" | ./setup.sh {% if hostvars['localhost']['global_env_name'] == 'staging' %}--staging{% endif %}
      become_user: ubuntu

    - name: Reset ssh connection to allow new group to take effect
      meta: reset_connection

    - name: Wait for instance to be ready after reset
      wait_for_connection:
        timeout: 300

    - name: Start content node
      community.docker.docker_compose_v2:
        project_src: /home/ubuntu/node-operator-tooling/content-node/docker-compose
        state: present
      become_user: ubuntu

    - name: Wait for content node to be ready
      uri:
        url: "http://localhost/statusz"
        method: GET
        status_code: 200
      register: health_check
      retries: 6
      delay: 10
      until: health_check.status == 200

    - name: Output node information
      debug:
        msg:
          - "Node deployed successfully"
          - "FQDN: {{ hostvars['localhost']['global_fqdn'] }}"
          - "IP: {{ ansible_host }}"
